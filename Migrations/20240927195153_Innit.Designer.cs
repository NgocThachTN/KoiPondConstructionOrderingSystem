// <auto-generated />
using System;
using KoiPondConstructionManagement.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KoiPondConstructionManagement.Migrations
{
    [DbContext(typeof(PrototypeKoiv1Context))]
    [Migration("20240927195153_Innit")]
    partial class Innit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__349DA586BB4B19E8");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.ConstructionType", b =>
                {
                    b.Property<int>("ConstructionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConstructionTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConstructionTypeId"));

                    b.Property<string>("ConstructionName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ConstructionTypeId")
                        .HasName("PK__Construc__5793AC9779509042");

                    b.ToTable("ConstructionType", (string)null);
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContractID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<string>("ContractName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ContractId")
                        .HasName("PK__Contract__C90D3409B2D49567");

                    b.HasIndex(new[] { "RequestId" }, "UQ__Contract__33A8519BA9CF81A9")
                        .IsUnique()
                        .HasFilter("[RequestID] IS NOT NULL");

                    b.ToTable("Contract", (string)null);
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Design", b =>
                {
                    b.Property<int>("DesignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DesignID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignId"));

                    b.Property<int?>("ConstructionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ConstructionTypeID");

                    b.Property<string>("DesignName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Size")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("DesignId")
                        .HasName("PK__Design__32B8E17FE49A3C08");

                    b.HasIndex("ConstructionTypeId");

                    b.ToTable("Design", (string)null);
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Maintenance", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaintenanceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceId"));

                    b.Property<string>("MaintencaceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("MaintenanceId")
                        .HasName("PK__Maintena__E60542B5C0DD6B7C");

                    b.ToTable("Maintenance", (string)null);
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.MaintenanceRequest", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .HasColumnType("int")
                        .HasColumnName("MaintenanceID");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("MaintenanceId", "RequestId")
                        .HasName("PK__Maintena__553FC7AC3E7BFD99");

                    b.HasIndex("RequestId");

                    b.ToTable("Maintenance_Request", (string)null);
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DesignId")
                        .HasColumnType("int")
                        .HasColumnName("DesignID");

                    b.Property<string>("RequestName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("SampleId")
                        .HasColumnType("int")
                        .HasColumnName("SampleID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("RequestId")
                        .HasName("PK__Request__33A8519AB7A2B723");

                    b.HasIndex("DesignId");

                    b.HasIndex("SampleId");

                    b.HasIndex("UserId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE3AC0475EDA");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Sample", b =>
                {
                    b.Property<int>("SampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SampleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SampleId"));

                    b.Property<int?>("ConstructionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ConstructionTypeID");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SampleName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Size")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SampleId")
                        .HasName("PK__Sample__8B99EC0AA7EEBDD0");

                    b.HasIndex("ConstructionTypeId");

                    b.ToTable("Sample", (string)null);
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC8A8D7ED3");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "AccountId" }, "UQ__Users__349DA5870A3A8404")
                        .IsUnique()
                        .HasFilter("[AccountID] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Contract", b =>
                {
                    b.HasOne("KoiPondConstructionManagement.Model.Request", "Request")
                        .WithOne("Contract")
                        .HasForeignKey("KoiPondConstructionManagement.Model.Contract", "RequestId")
                        .HasConstraintName("FK__Contract__Reques__267ABA7A");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Design", b =>
                {
                    b.HasOne("KoiPondConstructionManagement.Model.ConstructionType", "ConstructionType")
                        .WithMany("Designs")
                        .HasForeignKey("ConstructionTypeId")
                        .HasConstraintName("FK__Design__Construc__1DE57479");

                    b.Navigation("ConstructionType");
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.MaintenanceRequest", b =>
                {
                    b.HasOne("KoiPondConstructionManagement.Model.Maintenance", "Maintenance")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("MaintenanceId")
                        .IsRequired()
                        .HasConstraintName("FK__Maintenan__Maint__2B3F6F97");

                    b.HasOne("KoiPondConstructionManagement.Model.Request", "Request")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK__Maintenan__Reque__2C3393D0");

                    b.Navigation("Maintenance");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Request", b =>
                {
                    b.HasOne("KoiPondConstructionManagement.Model.Design", "Design")
                        .WithMany("Requests")
                        .HasForeignKey("DesignId")
                        .HasConstraintName("FK_Request_Design");

                    b.HasOne("KoiPondConstructionManagement.Model.Sample", "Sample")
                        .WithMany("Requests")
                        .HasForeignKey("SampleId")
                        .HasConstraintName("FK_Request_Sample");

                    b.HasOne("KoiPondConstructionManagement.Model.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Request__UserID__20C1E124");

                    b.Navigation("Design");

                    b.Navigation("Sample");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Sample", b =>
                {
                    b.HasOne("KoiPondConstructionManagement.Model.ConstructionType", "ConstructionType")
                        .WithMany("Samples")
                        .HasForeignKey("ConstructionTypeId")
                        .HasConstraintName("FK__Sample__Construc__1B0907CE");

                    b.Navigation("ConstructionType");
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.User", b =>
                {
                    b.HasOne("KoiPondConstructionManagement.Model.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("KoiPondConstructionManagement.Model.User", "AccountId")
                        .HasConstraintName("FK__Users__AccountID__15502E78");

                    b.HasOne("KoiPondConstructionManagement.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Users__RoleID__164452B1");

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("KoiPondConstructionManagement.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("KoiPondConstructionManagement.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("KoiPondConstructionManagement.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("KoiPondConstructionManagement.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiPondConstructionManagement.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("KoiPondConstructionManagement.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Account", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.ConstructionType", b =>
                {
                    b.Navigation("Designs");

                    b.Navigation("Samples");
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Design", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Maintenance", b =>
                {
                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Request", b =>
                {
                    b.Navigation("Contract");

                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.Sample", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("KoiPondConstructionManagement.Model.User", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
